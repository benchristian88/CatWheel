# ========== Substitutions ==========
# Define reusable variables
substitutions:
  name: cat-wheel
  friendly_name: Cat Wheel
  yourtimezone: "Pacific/Auckland"

# ========== ESPHome Setup ==========
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'
  on_boot:
    # On boot, force update of key sensors and set initial state
    then:
      - lambda: |-
          id(distance_today).update();
          id(distance_total).update();
          id(speed_max).update();
          id(speed_sensor).publish_state(0.0);
          id(last_rotation_time_persisted) = id(last_rotation_time);
          id(boot_time) = millis();

# ========== ESP32 Board ==========
esp32:
  board: esp32dev
  framework:
    type: arduino

# ========== Logging, API, OTA, and Network ==========
logger:
api:
ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: 
    ssid: "CatWheel Fallback"
    password: "grasshopper"

captive_portal:

# ========== Web Interface ==========
web_server:
  port: 80

# ========== Time Management ==========
time:
  - platform: homeassistant
    id: my_time
    timezone: '${yourtimezone}'
    on_time:
      # Run daily reset script at midnight
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - script.execute: daily_reset

# ========== Binary Sensors ==========
binary_sensor:
  # Physical sensor triggered by the wheel (e.g., Hall effect sensor)
  - platform: gpio
    pin:
      number: 14
      mode: INPUT
      inverted: true
    name: "Wheel Sensor"
    id: hall_sensor
    filters:
      - delayed_on_off: 10ms
    on_press:
      then:
        - script.execute: record_rotation

  # Shows activity based on current speed
  - platform: template
    name: "Activity"
    lambda: |-
      if (id(speed_sensor).state > 0.5) {
        return true;
      } else {
        return false;
      } 

# ========== Sensor Templates ==========
sensor:
  # Current calculated wheel speed in km/hr
  - platform: template
    name: "Current Speed"
    id: speed_sensor
    lambda: |-
      return 0.0;
    unit_of_measurement: "km/hr"
    accuracy_decimals: 2
    icon: "mdi:speedometer"
    update_interval: never

  # Distance traveled today
  - platform: template
    name: "Distance Today"
    id: distance_today
    lambda: |-
      return id(distance_today_val) / 1000;
    unit_of_measurement: "km"
    accuracy_decimals: 2
    icon: "mdi:run"
    update_interval: never

  # Total distance over all time
  - platform: template
    name: "Total Distance"
    id: distance_total
    lambda: |-
      return id(distance_total_val) * 0.001;
    unit_of_measurement: "km"
    accuracy_decimals: 2
    icon: "mdi:map-marker-distance"
    update_interval: never

  # Max speed reached today
  - platform: template
    name: "Max Speed"
    id: speed_max
    lambda: |-
      return id(speed_max_val) * 3.6;
    unit_of_measurement: "km/hr"
    accuracy_decimals: 2
    icon: "mdi:speedometer"
    update_interval: never

  # Longest single session duration today (seconds)
  - platform: template
    name: "Longest Session"
    id: longest_session_sensor
    lambda: |-
      return id(longest_session_duration) / 1000.0;
    unit_of_measurement: "s"
    accuracy_decimals: 0
    icon: "mdi:clock-outline"
    update_interval: never

  # Duration of current session (in progress)
  - platform: template
    name: "Current Session Duration"
    id: current_session_sensor
    lambda: |-
      return id(current_session_duration) / 1000.0;
    unit_of_measurement: "s"
    accuracy_decimals: 0
    icon: "mdi:timer-outline"
    update_interval: never

  # Number of valid sessions today
  - platform: template
    name: "Sessions Today"
    id: session_count_sensor
    lambda: |-
      return id(session_count_today);
    update_interval: never
    icon: "mdi:counter"

  # Uptime for the ESP device
  - platform: uptime
    name: "ESP Uptime"

  # Last Session Duration
  - platform: template
    name: "Last Session Duration"
    id: last_session_sensor
    lambda: |-
      return id(last_session_duration) / 1000.0;
    unit_of_measurement: "s"
    accuracy_decimals: 0
    icon: "mdi:history"
    update_interval: never
  

# ========== Text Sensors ==========
text_sensor:
  # Time since last detected movement on the wheel
  - platform: template
    name: "Last Movement"
    id: time_since_last_move
    update_interval: 10s
    lambda: |-
      uint32_t now = millis();
      uint32_t last = id(last_rotation_time_persisted);
      if (last == 0) {
        return {"Never"};
      }
      uint32_t diff = (now - last) / 1000;

      if (diff < 60) {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "%lus ago", diff);
        return {buffer};
      } else if (diff < 3600) {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "%lum ago", diff / 60);
        return {buffer};
      } else {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "%luh ago", diff / 3600);
        return {buffer};
      }
  # Summary of the Session
  - platform: template
    name: "Session Summary"
    lambda: |-
      char buffer[64];
      snprintf(buffer, sizeof(buffer), "%.2f km / %d sessions", id(distance_today).state, id(session_count_today));
      return {buffer};

  # Health Status 
  - platform: template
    name: "Health Status"
    lambda: |-
      if (millis() - id(boot_time) < 60000) {
        return {"Starting..."};
      } else if (id(last_rotation_time_persisted) == 0) {
        return {"No movement"};
      } else {
        return {"OK"};
      }
    update_interval: 30s
    icon: "mdi:heart-pulse"
  
  # Speed Zone of the session (only updates while moving)
  - platform: template
    name: "Speed Zone"
    lambda: |-
      float speed = id(speed_sensor).state;
      if (speed < 0.5) return {};  // Suppress update when idle
      else if (speed < 3.0) return {"Walking"};
      else if (speed < 6.0) return {"Jogging"};
      else if (speed < 9.0) return {"Running"};
      else return {"Sprinting"};
    update_interval: 5s

# ========== Globals ==========
# Used to store persistent or runtime values
globals:
  - id: last_rotation_time_persisted
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: wheel_circumference
    type: float
    initial_value: '1.88'  # meters

  - id: last_rotation_time
    type: uint32_t
    restore_value: no
    initial_value: '0'

  - id: distance_today_val
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: distance_total_val
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: speed_max_val
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: boot_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

  - id: session_start_time
    type: uint32_t
    restore_value: no
    initial_value: '0'

  - id: longest_session_duration
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: current_session_duration
    type: uint32_t
    restore_value: no
    initial_value: '0'

  - id: session_count_today
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: session_end_grace_period
    type: uint32_t
    initial_value: '5000'  # ms: Grace period before ending session

  - id: minimum_session_duration
    type: uint32_t
    initial_value: '3000'  # ms: Ignore sessions shorter than this

  - id: last_session_duration
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: debug_enabled
    type: bool
    restore_value: no
    initial_value: 'false'

# ========== Scripts ==========
script:
  # Called whenever the wheel rotates
  - id: record_rotation
    then:
    - lambda: |-
        static uint32_t last_rotation = 0;
        uint32_t now = millis();

        float delta_sec = 0;
        if (last_rotation != 0) {
          delta_sec = (now - last_rotation) / 1000.0;
          
          if (delta_sec < 0.5) {
            if (id(debug_enabled)) {
              ESP_LOGD("record_rotation", "Skipped rotation: delta too short: %.2fs", delta_sec);
            }
            return;
          }

          if (delta_sec > 30.0) {
            if (id(debug_enabled)) {
              ESP_LOGD("record_rotation", "Long gap (%.2fs), treating as new session", delta_sec);
            }
            id(session_start_time) = now;
          } else {
            static float last_speed = 0;
            float current_speed = id(wheel_circumference) / delta_sec;
            if (current_speed > 0.1) {
              float smoothed_speed = (last_speed * 0.3) + (current_speed * 0.7);
              last_speed = smoothed_speed;
              id(speed_sensor).publish_state(smoothed_speed * 3.6);
            }

            if (current_speed > id(speed_max_val) + 0.1) {
              id(speed_max_val) = current_speed;
              id(speed_max).update();
            }
          }
        }

        last_rotation = now;
        id(distance_today_val) += id(wheel_circumference);
        id(distance_total_val) += id(wheel_circumference);
        id(distance_today).update();
        id(distance_total).update();
        id(last_rotation_time) = now;
        id(last_rotation_time_persisted) = now;

        if (id(session_start_time) == 0) {
          id(session_start_time) = now;
        }

  # Clears daily stats at midnight
  - id: daily_reset
    then:
      - lambda: |-
          id(distance_today_val) = 0.0;
          id(speed_max_val) = 0.0;
          id(session_count_today) = 0;
          id(longest_session_duration) = 0;
          id(distance_today).update();
          id(speed_max).update();
          id(session_count_sensor).update();
          id(longest_session_sensor).update();

  # Resets everything including total distance
  - id: reset_all_stats
    then:
      - lambda: |-
          id(distance_today_val) = 0.0;
          id(distance_total_val) = 0.0;
          id(speed_max_val) = 0.0;
          id(distance_today).update();
          id(distance_total).update();
          id(speed_max).update();

  # Placeholder script just to force sensor updates every minute
  - id: noop_save_stats
    then:
      - logger.log: "Triggered noop_save_stats (values auto-persist)"

# ========== Buttons ==========
button:
  - platform: template
    name: "Reset All Stats"
    id: reset_all_button
    on_press:
      then:
        - script.execute: reset_all_stats

  - platform: restart
    name: "Reboot Device"
    id: reboot_button

  - platform: safe_mode
    name: "Reboot to Safe Mode"

  - platform: template
    name: "Factory Reset"
    id: factory_reset_button
    on_press:
      then:
        - script.execute: reset_all_stats
        - delay: 1s
        - button.press: reboot_button

  # Button to Simulate a Wheel Rotation for testing
  - platform: template
    name: "Simulate Wheel Turn"
    on_press:
      then:
        - script.execute: record_rotation

  #Button to toggle debug logging
  - platform: template
    name: "Toggle Debug Logging"
    on_press:
      then:
        - lambda: |-
            id(debug_enabled) = !id(debug_enabled);
            ESP_LOGI("debug_toggle", "Debug logging %s", id(debug_enabled) ? "ENABLED" : "DISABLED");


# ========== Periodic Tasks ==========
interval:
  # Every minute: run save script (to persist values)
  - interval: 1min
    then:
      - script.execute: noop_save_stats

  # Every 500ms: update session tracking logic
  - interval: 500ms
    then:
      - lambda: |-
          uint32_t now = millis();
          const uint32_t grace = id(session_end_grace_period);

          if (id(session_start_time) != 0 && (now - id(last_rotation_time) > grace)) {
            // Session ending
            uint32_t duration = now - id(session_start_time);

            if (duration >= id(minimum_session_duration)) {
              id(session_count_today) += 1;
              id(session_count_sensor).update();
              id(last_session_duration) = duration;
              id(last_session_sensor).update();

              if (duration > id(longest_session_duration)) {
                id(longest_session_duration) = duration;
                id(longest_session_sensor).update();
                ESP_LOGD("session", "🎉 New longest session: %u ms", duration);
              } else {
                ESP_LOGD("session", "Session ended. Duration: %u ms", duration);
              }
            } else {
              ESP_LOGD("session", "Short session ignored. Duration: %u ms", duration);
            }

            // Reset session state
            id(current_session_duration) = 0;
            id(current_session_sensor).update();
            id(session_start_time) = 0;
            id(speed_sensor).publish_state(0.0);

          } else if (id(session_start_time) != 0) {
            // Session is still going
            id(current_session_duration) = now - id(session_start_time);

            static uint32_t last_update_time = 0;
            if (now - last_update_time >= 1000) {
              id(current_session_sensor).update();
              last_update_time = now;
            }
          }
